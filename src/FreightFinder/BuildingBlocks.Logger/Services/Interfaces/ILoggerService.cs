using BuildingBlocks.Logger.Enums;
using BuildingBlocks.Logger.Models;
using System;
using System.Collections.Generic;

namespace BuildingBlocks.Logger.Services.Interfaces
{
    public interface ILoggerService
    {
        /// <summary>
        /// Write a Log message at the chosen level
        /// </summary>
        /// <param name="logLevel">Indicates the logging level (Verbose, Debug, Information, Warning, Error, Fatal</param>
        /// <param name="messageTemplate">Log message string template. Ex: "Unable to get consumer data: {consumer}"</param>
        /// <param name="propertyValues">Values for filling in the message template variables</param>
        /// <param name="flow">Business process related to code flow. Ex: PAYMENT, BLOCK, RBP, SMS, EMAIL</param>
        void Log(BBLogLevel logLevel, string messageTemplate, IEnumerable<ParametersLogModel> propertyValues = null, string flow = null);

        /// <summary>
        /// Write a Log message with an exception at the chosen level
        /// </summary>
        /// <param name="logLevel">Indicates the logging level (Verbose, Debug, Information, Warning, Error, Fatal</param>
        /// <param name="exception">Object containing the exception generated by the application"</param>
        /// <param name="messageTemplate">Log message string template. Ex: "Unable to get consumer data: {consumer}"</param>
        /// <param name="propertyValues">Values for filling in the message template variables</param>
        /// <param name="flow">Business process related to code flow. Ex: PAYMENT, BLOCK, RBP, SMS, EMAIL</param>
        void Log(BBLogLevel logLevel, Exception exception, string messageTemplate, IEnumerable<ParametersLogModel> propertyValues = null, string flow = null);

    }
}
